version: '3.8'
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: npm run start
    ports:
      - 4000:4000
    volumes:
      - ./backend:/var/www/backend
      - ./backend/node_modules:/var/www/backend/node_modules
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    tty: true
    ports:
      - 3000:3000
    user: 1000:1000
    entrypoint: npm run dev
    volumes:
      - ./frontend:/var/www/frontend
      - ./frontend/node_modules:/var/www/frontend/node_modules
    depends_on:
      - backend
    networks:
      - app-network

  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - 80:80
    depends_on:
      - backend
    links:
      - backend
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - ./config/custom_proxy_settings.conf:/etc/nginx/conf.d/custom_proxy_settings.conf
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
    expose:
      - '80'
    depends_on:
      - backend
      - nginx-proxy
    links:
      - backend
    environment:
      - VIRTUAL_HOST=ecommerce.test
      - VIRTUAL_PORT=80
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
